export const config: BotConfig = {
	token: '',
	database: '',
	ownerIDs: [],
	decryptionKey: '',
	userAgent: 'examplebot@example (https://github.com/shadowrunners/Evelyn)',

	debug: {
		devGuild: '',
		overwatchChannel: '',
		telemetry: {
			enabled: false,
			dsn: '',
		},
		watcherHook: '',
		logs: {
			disableDX: true,
			disableGiveawaysLogs: false,
		},
	},
	APIs: {
		rawgKey: '',
		geniusKey: '',
		cattoKey: '',
		tmdbAPIKey: '',
	},
	music: {
		nodes: [
			{
				name: 'Evelyn - Node 03',
				host: 'localhost',
				port: 7734,
				password: '',
				secure: false,
			},
		],
	},
};

export type BotConfig = {
	/** The bot's token. */
	token: string;
	/** The MongoDB database URI. */
	database: string;
	/** The array of IDs for the owners / developers of the bot. */
	ownerIDs: Array<string>;
	/** The key used to decrypt user's webhooks. */
	decryptionKey: string;
	/** The user agent which will be provided when needed to API services that require it. */
	userAgent: string;

	/** The debug object containing debug related information. */
	debug: {
		/** The developer guild where dev related commands will be registered. */
		devGuild: string;
		/** The telemetry object containing the enabled status and Sentry DSN URL. */
		telemetry: {
			/** Whether the telemetry system is enabled or not. */
			enabled: boolean;
			/** The Sentry DSN URL. */
			dsn: string;
		};
		/** The logs object giving you control over what debug info is outputted to the console. */
		logs: {
			/** Disables DiscordX logs (turns silent from false to true). */
			disableDX: boolean;
			/** Disables Giveaways logs. */
			disableGiveawaysLogs: boolean;
		}
		/** The channel where additional telemetry will be sent to the bot owner. */
		overwatchChannel: string;
		/** Used to send additional telemetry to the bot owner. */
		watcherHook: string;
	};

	/** The API object containing all API related information such as keys etc. */
	APIs: {
		/** The API key generated by RAWG.io. */
		rawgKey: string;
		/** The API key generated by the Genius Developer Portal. */
		geniusKey: string;
		/** The API key generated by the The Cat API Dashboard. */
		cattoKey: string;
		/** The API key generated by the TMDB API Portal. */
		tmdbAPIKey: string;
	};

	/** The music object containing all Lavalink nodes. */
	music: {
		/** The array of lavalink nodes. */
		nodes: {
			/** The name of the node. */
			name: string;
			/** The IP of the node. */
			host: string;
			/** The port of the node. */
			port: number;
			/** The password for the node. */
			password: string;
			/** The SSL boolean of the node. Set this to true if you get an SSL error. */
			secure: boolean;
		}[];
	};
}
